name: HeterBaseline_V2XReal_lidarcamera_fcooper
root_dir: /home/dshenkut/cvips/data/V2XReal/v2xreal/v2xrealCam/train
validate_dir: /home/dshenkut/cvips/data/V2XReal/v2xreal/v2xrealCam/val/
test_dir: /home/dshenkut/cvips/data/V2XReal/v2xreal/v2xrealCam/test/
dataset_mode: 'ic'  # or 'ic', 'v2v', 'i2i'
# /home/dshenkut/cvips/data/V2XReal/v2xreal/v2xrealCam/train/2023-04-04-14-33-53_50_0/-1/000000_cam1.jpeg
comm_range: 70
input_source: ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -40, -15, 102.4, 40, 15] 


heter:
#   assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1&m2"
  mapping_dict:
    m1: m1
    m2: m2
    m3: m3
    m4: m4
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar
    m2:
      sensor_type: &sensor_type_m2 'lidar'
      core_method: &core_method_m2 "second"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m2 [0.1, 0.1, 0.1]
          max_points_per_voxel: 5
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar

    m3:
      sensor_type: &sensor_type_m3 'lidar'
      core_method: &core_method_m3 "second"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m3 [0.1, 0.1, 0.1]
          max_points_per_voxel: 5
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar

    m4:
      sensor_type: &sensor_type_m4 'lidar'
      core_method: &core_method_m4 "second"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m4 [0.1, 0.1, 0.1]
          max_points_per_voxel: 5
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar

yaml_parser: "load_general_params"
train_params:
  batch_size: &batch_size 16
  epoches: 50
  eval_freq: 2
  save_freq: 2
  max_cav: 4




fusion:
  core_method: 'intermediate'
  dataset: 'v2xreal'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder
data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: [0.4, 0.4, 30]
    max_points_per_voxel: 32
    max_voxel_train: 64000
    max_voxel_test: 640000
  cav_lidar_range: *cav_lidar
  num_class: &num_class 3
  anchor_generator_config: &anchor_generator_config
    - 'class_name': 'vehicle'
      'anchor_sizes': [ [ 3.9, 1.6, 1.56 ] ]
      'anchor_rotations': [ 0, 1.57 ]
      'anchor_bottom_heights': [ -1.78 ]
      'align_center': True
      'feature_map_stride': 2
      'matched_threshold': 0.6
      'unmatched_threshold': 0.45
    - 'class_name': 'pedestrian'
      'anchor_sizes': [ [ 0.8, 0.6, 1.73 ] ]
      'anchor_rotations': [ 0, 1.57 ]
      'anchor_bottom_heights': [ -0.6 ]
      'align_center': True
      'feature_map_stride': 2
      'matched_threshold': 0.5
      'unmatched_threshold': 0.35
    - 'class_name': 'truck'
      'anchor_sizes': [ [ 8, 3, 3 ] ]
      'anchor_rotations': [ 0, 1.57 ]
      'anchor_bottom_heights': [ -1.78 ]
      'align_center': True
      'feature_map_stride': 2
      'matched_threshold': 0.6
      'unmatched_threshold': 0.45
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  num_class: *num_class 
  anchor_args:
    W: 256  # Make sure these are defined
    H: 256
    grid_size: [256, 256]  # Add this if needed
    cav_lidar_range: *cav_lidar
    num: &anchor_num 2
    anchor_generator_config: *anchor_generator_config
  target_args:
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 300 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

model:
  core_method: heter_model_baseline
  args:
    # ego_modality: *ego_modality
    lidar_range: *cav_lidar

    m1:
      core_method: *core_method_m1
      sensor_type: *sensor_type_m1

      encoder_args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3, 5, 8]
        layer_strides: [2, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
  
      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

    m2:
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2

      encoder_args:
        anchor_number: *anchor_num
        # grid_conf: *grid_conf_m2
        # data_aug_conf: *data_aug_conf_m2
        img_downsample: 8
        img_features: &img_feature 128
        use_depth_gt: false
        depth_supervision: true
        camera_encoder: EfficientNet

      camera_mask_args:
        cav_lidar_range: *cav_lidar
        # grid_conf: *grid_conf_m2

      backbone_args:
        layer_nums: [3, 5, 8]
        layer_strides: [2, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
        inplanes: 128
  
      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

    fusion_method: max 
    
    in_head: 256
    
    anchor_number: *anchor_num
    # dir_args: *dir_args

loss:
  core_method: point_pillar_depth_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      # args: *dir_args
    depth:
      weight: 1.0

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 25]