name: dairv2x_point_pillar_lidarcp_v2xvit
data_dir: "/home/dshenkut/LicardCp/data/dairv2x/cooperative-vehicle-infrastructure"
root_dir: "/home/dshenkut/LicardCp/data/dairv2x/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/home/dshenkut/LicardCp/data/dairv2x/cooperative-vehicle-infrastructure/val.json"
test_dir: "/home/dshenkut/LicardCp/data/dairv2x/cooperative-vehicle-infrastructure/val.json"


yaml_parser: "load_general_params"
train_params:
  batch_size: &batch_size 1
  epoches: 20
  eval_freq: 2
  save_freq: 2
  max_cav: 5

comm_range: 100
input_source: ['lidar', 'camera']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3.5, 102.4, 51.2, 1.5]

fusion:
  core_method: 'intermediate'
  dataset: 'dairv2x'
  args: 
    proj_first: false
    grid_conf: &grid_conf
      xbound: [-102.4, 102.4, 0.4]   # Limit the range of the x direction and divide the grids
      ybound: [-51.2, 51.2, 0.4]   # Limit the range of the y direction and divide the grids
      zbound: [-3.5, 1.5, 4.0]   # Limit the range of the z direction and divide the grids
      ddiscr: [2, 50, 48]
      mode: 'LID'
    data_aug_conf: &data_aug_conf
      resize_lim: [0.65, 0.7]
      final_dim: [384, 512]
      rot_lim: [-3.6, 3.6]
      H: 600
      W: 800
      rand_flip: False
      bot_pct_lim: [0.0, 0.05]
      cams: ['camera0', 'camera1', 'camera2', 'camera3']
      Ncams: 4


data_augment: # no use in intermediate fusion
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # detection range for each individual cav.
  cav_lidar_range: *cav_lidar

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw


model: 
  core_method: 'licard_cp'
  args:
    voxel_size: *voxel_size
    in
  #   input_source: ['lidar', 'camera']
  #   label_type: 'lidar'
  #   cav_lidar_range: *cav_lidar




loss:
  core_method: point_pillar_depth_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
    depth:
      weight: 1.0

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 25]